Index: os-postgresql-15/src/common/hmac_openssl.c
===================================================================
--- os-postgresql-15.orig/src/common/hmac_openssl.c
+++ os-postgresql-15/src/common/hmac_openssl.c
@@ -63,7 +63,12 @@ typedef enum pg_hmac_errno
 /* Internal pg_hmac_ctx structure */
 struct pg_hmac_ctx
 {
+#if OPENSSL_VERSION_NUMBER >= 0x30000000L
+	EVP_MAC *evpmac;
+	EVP_MAC_CTX *hmacctx;
+#else
 	HMAC_CTX   *hmacctx;
+#endif
 	pg_cryptohash_type type;
 	pg_hmac_errno error;
 	const char *errreason;
@@ -113,11 +118,17 @@ pg_hmac_create(pg_cryptohash_type type)
 	 * previous runs.
 	 */
 	ERR_clear_error();
-#ifdef HAVE_HMAC_CTX_NEW
+
+#if defined(HAVE_HMAC_CTX_NEW) || OPENSSL_VERSION_NUMBER >= 0x30000000L
 #ifndef FRONTEND
 	ResourceOwnerEnlargeHMAC(CurrentResourceOwner);
 #endif
+#if OPENSSL_VERSION_NUMBER >= 0x30000000L
+	ctx->evpmac = NULL;
+	ctx->hmacctx = NULL;
+#else /* OPENSSL_VERSION_NUMBER */
 	ctx->hmacctx = HMAC_CTX_new();
+#endif
 #else
 	ctx->hmacctx = ALLOC(sizeof(HMAC_CTX));
 #endif
@@ -134,14 +145,14 @@ pg_hmac_create(pg_cryptohash_type type)
 		return NULL;
 	}
 
-#ifdef HAVE_HMAC_CTX_NEW
+#if defined(HAVE_HMAC_CTX_NEW) || OPENSSL_VERSION_NUMBER >= 0x30000000L
 #ifndef FRONTEND
 	ctx->resowner = CurrentResourceOwner;
 	ResourceOwnerRememberHMAC(CurrentResourceOwner, PointerGetDatum(ctx));
 #endif
 #else
 	memset(ctx->hmacctx, 0, sizeof(HMAC_CTX));
-#endif							/* HAVE_HMAC_CTX_NEW */
+#endif							/* HAVE_HMAC_CTX_NEW || OPENSSL 3 */
 
 	return ctx;
 }
@@ -159,6 +170,7 @@ pg_hmac_init(pg_hmac_ctx *ctx, const uin
 	if (ctx == NULL)
 		return -1;
 
+#if OPENSSL_VERSION_NUMBER < 0x30000000L
 	switch (ctx->type)
 	{
 		case PG_MD5:
@@ -190,6 +202,64 @@ pg_hmac_init(pg_hmac_ctx *ctx, const uin
 	}
 
 	return 0;
+
+#else
+	/* OpenSSL 3 version */
+	OSSL_PARAM params[2];
+
+	ctx->evpmac = EVP_MAC_fetch(NULL, "HMAC", NULL);
+
+	if (ctx->evpmac == NULL)
+		goto err;
+
+	switch (ctx->type)
+	{
+		case PG_MD5:
+			params[0] = OSSL_PARAM_construct_utf8_string("digest", "MD5", 0);
+			params[1] = OSSL_PARAM_construct_end();
+			break;
+		case PG_SHA1:
+			params[0] = OSSL_PARAM_construct_utf8_string("digest", "SHA1", 0);
+			params[1] = OSSL_PARAM_construct_end();
+			break;
+		case PG_SHA224:
+			params[0] = OSSL_PARAM_construct_utf8_string("digest", "SHA2-224", 0);
+			params[1] = OSSL_PARAM_construct_end();
+			break;
+		case PG_SHA256:
+			params[0] = OSSL_PARAM_construct_utf8_string("digest", "SHA2-256", 0);
+			params[1] = OSSL_PARAM_construct_end();
+			break;
+		case PG_SHA384:
+			params[0] = OSSL_PARAM_construct_utf8_string("digest", "SHA2-384", 0);
+			params[1] = OSSL_PARAM_construct_end();
+			break;
+		case PG_SHA512:
+			params[0] = OSSL_PARAM_construct_utf8_string("digest", "SHA2-512", 0);
+			params[1] = OSSL_PARAM_construct_end();
+			break;
+	}
+
+	ctx->hmacctx = EVP_MAC_CTX_new(ctx->evpmac);
+
+	if (ctx->hmacctx == NULL)
+		goto err;
+
+	status = EVP_MAC_init(ctx->hmacctx, key, len, params);
+
+	if (status < 0)
+		goto err;
+
+	return 0;
+
+err:
+	/* OpenSSL internals return 1 on success, 0 on failure */
+	ctx->errreason = SSLerrmessage(ERR_get_error());
+	ctx->error = PG_HMAC_ERROR_OPENSSL;
+
+	return -1;
+
+#endif /* OPENSSL VERSION */
 }
 
 /*
@@ -205,7 +275,11 @@ pg_hmac_update(pg_hmac_ctx *ctx, const u
 	if (ctx == NULL)
 		return -1;
 
+#if OPENSSL_VERSION_NUMBER < 0x30000000L
 	status = HMAC_Update(ctx->hmacctx, data, len);
+#else
+	status = EVP_MAC_update(ctx->hmacctx, data, len);
+#endif
 
 	/* OpenSSL internals return 1 on success, 0 on failure */
 	if (status <= 0)
@@ -277,7 +351,11 @@ pg_hmac_final(pg_hmac_ctx *ctx, uint8 *d
 			break;
 	}
 
+#if OPENSSL_VERSION_NUMBER < 0x30000000L
 	status = HMAC_Final(ctx->hmacctx, dest, &outlen);
+#else
+	status = EVP_MAC_final(ctx->hmacctx, dest, &outlen, len);
+#endif
 
 	/* OpenSSL internals return 1 on success, 0 on failure */
 	if (status <= 0)
@@ -300,12 +378,17 @@ pg_hmac_free(pg_hmac_ctx *ctx)
 	if (ctx == NULL)
 		return;
 
-#ifdef HAVE_HMAC_CTX_FREE
+#if defined(HAVE_HMAC_CTX_NEW) || OPENSSL_VERSION_NUMBER >= 0x30000000L
+#if OPENSSL_VERSION_NUMBER >= 0x30000000L
+	EVP_MAC_CTX_free(ctx->hmacctx);
+	EVP_MAC_free(ctx->evpmac);
+#else
 	HMAC_CTX_free(ctx->hmacctx);
+#endif /* OPENSSL_VERSION_NUMBER */
 #ifndef FRONTEND
 	ResourceOwnerForgetHMAC(ctx->resowner, PointerGetDatum(ctx));
 #endif
-#else
+#else /* Not HAVE_HMAC_CTX_NEW or OPENSSL >= 3 */
 	explicit_bzero(ctx->hmacctx, sizeof(HMAC_CTX));
 	FREE(ctx->hmacctx);
 #endif
